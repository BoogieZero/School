<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QuickFont.ES20</name>
    </assembly>
    <members>
        <member name="T:QuickFont.Builder">
            <summary>
            Class for building a Quick Font, given a Font
            and a configuration object.
            </summary>
        </member>
        <member name="M:QuickFont.Builder.GetMaxGlyphSize(System.Collections.Generic.List{System.Drawing.SizeF})">
            <summary>
            Returns the maximum width and maximum height from the list of sizes
            </summary>
            <param name="sizes"></param>
            <returns></returns>
        </member>
        <member name="M:QuickFont.Builder.GetMinGlyphSize(System.Collections.Generic.List{System.Drawing.SizeF})">
            <summary>
            Returns the minimum width and minimum height from the list of sizes
            </summary>
            <param name="sizes"></param>
            <returns></returns>
        </member>
        <member name="M:QuickFont.Builder.IsMonospaced(System.Collections.Generic.List{System.Drawing.SizeF})">
            <summary>
            Returns true if all glyph widths are within 5% of each other
            </summary>
            <param name="sizes"></param>
            <returns></returns>
        </member>
        <member name="M:QuickFont.Builder.CreateInitialBitmap(QuickFont.IFont,System.Drawing.SizeF,System.Int32,QuickFont.QFontGlyph[]@,QuickFont.Configuration.TextGenerationRenderHint)">
            <summary>
            Creates the initial font bitmap. This is simply a long thin strip of all glyphs in a row
            </summary>
            <param name="font">The <see cref="T:QuickFont.IFont"/> object to build the initial bitmap from</param>
            <param name="maxSize">The maximum glyph size of the font</param>
            <param name="initialMargin">The initial bitmap margin (used for all four sides)</param>
            <param name="glyphs">A collection of <see cref="T:QuickFont.QFontGlyph"/>s corresponding to the initial bitmap</param>
            <param name="renderHint">The font rendering hint to use</param>
            <returns></returns>
        </member>
        <member name="M:QuickFont.Builder.RetargetGlyphRectangleInwards(System.Drawing.Imaging.BitmapData,QuickFont.QFontGlyph,System.Boolean,System.Byte)">
            <summary>
            Retargets a given glyph rectangle inwards, to find the minimum bounding box
            Assumes the current bounding box is larger than the minimum
            </summary>
            <param name="bitmapData">The bitmap containing the glyph</param>
            <param name="glyph">The <see cref="T:QuickFont.QFontGlyph"/> to retarget</param>
            <param name="setYOffset">Whether to update the y offset of the glyph or not</param>
            <param name="alphaTolerance">The alpha tolerance</param>
        </member>
        <member name="M:QuickFont.Builder.RetargetGlyphRectangleOutwards(System.Drawing.Imaging.BitmapData,QuickFont.QFontGlyph,System.Boolean,System.Byte)">
            <summary>
            Retargets a given glyph rectangle outwards, to find the minimum bounding box
            Assumes the current bounding box is smaller than the minimum
            </summary>
            <param name="bitmapData">The bitmap containing the glyph</param>
            <param name="glyph">The <see cref="T:QuickFont.QFontGlyph"/> to retarget</param>
            <param name="setYOffset">Whether to update the y offset of the glyph or not</param>
            <param name="alphaTolerance">The alpha tolerance</param>
        </member>
        <member name="M:QuickFont.Builder.GenerateBitmapSheetsAndRepack(QuickFont.QFontGlyph[],System.Drawing.Imaging.BitmapData[],System.Int32,System.Int32,QuickFont.QFontGlyph[]@,System.Int32)">
            <summary>
            Generates the final bitmap sheet for the font
            </summary>
            <param name="sourceGlyphs">A collection of <see cref="T:QuickFont.QFontGlyph"/>s. These are written to the final bitmap</param>
            <param name="sourceBitmaps"> The source bitmaps for the font (initial bitmap)</param>
            <param name="destSheetWidth">The destination bitmap width</param>
            <param name="destSheetHeight">The destination bitmap height</param>
            <param name="destGlyphs">A collection of <see cref="T:QuickFont.QFontGlyph"/>s that are placed on the final bitmap sheet</param>
            <param name="destMargin">The margin for the final bitmap sheet</param>
            <returns>A collection of <see cref="T:QuickFont.QBitmap"/>s. These are the final bitmap sheets</returns>
        </member>
        <member name="M:QuickFont.Builder.BuildFontData(System.String)">
            <summary>
            Builds the font data
            </summary>
            <param name="saveName">The filename to save the font texture files too. If null, the texture files are not saved</param>
            <returns>A <see cref="T:QuickFont.QFontData"/></returns>
        </member>
        <member name="M:QuickFont.Builder.GetOptimalPageSize(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the optimal page size
            </summary>
            <param name="width">The desired page width</param>
            <param name="height">The desired page height</param>
            <param name="pageMaxTextureSize">The max page texture size</param>
            <returns>The optimal page size</returns>
        </member>
        <member name="M:QuickFont.Builder.BuildDropShadow(System.Collections.Generic.List{QuickFont.QBitmap},QuickFont.QFontGlyph[],QuickFont.Configuration.QFontShadowConfiguration,System.Char[],System.Byte)">
            <summary>
            Builds the drop shadow
            </summary>
            <param name="sourceFontSheets">The bitmap sheets from the source font</param>
            <param name="sourceFontGlyphs">The glyphs from the source font</param>
            <param name="shadowConfig">The shadow configuration</param>
            <param name="charSet">The char set to include in the shadow</param>
            <param name="alphaTolerance">The alpha tolerance</param>
            <returns>The shadow QFont</returns>
        </member>
        <member name="M:QuickFont.Builder.ScaleSheetsAndGlyphs(System.Collections.Generic.List{QuickFont.QBitmap},QuickFont.QFontGlyph[],System.Single)">
            <summary>
            Scales the sheets and glyphs of a font by the specified amount
            </summary>
            <param name="pages">The pages to scale</param>
            <param name="glyphs">The glyphs to scale</param>
            <param name="scale">The amount to scale by</param>
        </member>
        <member name="M:QuickFont.Builder.RetargetAllGlyphs(System.Collections.Generic.List{QuickFont.QBitmap},QuickFont.QFontGlyph[],System.Byte)">
            <summary>
            Updates the glyph targeting - required after they have been scaled
            </summary>
            <param name="pages">The pages containing the glyphs</param>
            <param name="glyphs">The glyphs to retarget</param>
            <param name="alphaTolerance">The alpha tolerance</param>
        </member>
        <member name="M:QuickFont.Builder.SaveQFontDataToFile(QuickFont.QFontData,System.String)">
            <summary>
            Saves the <see cref="T:QuickFont.QFontData"/> to the specified file
            This is used for loading custom texture fonts
            </summary>
            <param name="data">The <see cref="T:QuickFont.QFontData"/> to save</param>
            <param name="filePath">The filepath</param>
        </member>
        <member name="M:QuickFont.Builder.CreateBitmapPerGlyph(QuickFont.QFontGlyph[],QuickFont.QBitmap[],QuickFont.QFontGlyph[]@,QuickFont.QBitmap[]@)">
            <summary>
            Creates an individual bitmap for each glyph
            </summary>
            <param name="sourceGlyphs">The source glyphs</param>
            <param name="sourceBitmaps">The source bitmaps</param>
            <param name="destGlyphs">The destination glyphs</param>
            <param name="destBitmaps">The destination bitmaps</param>
        </member>
        <member name="M:QuickFont.Builder.LoadQFontDataFromFile(System.String,System.Single,QuickFont.Configuration.QFontConfiguration)">
            <summary>
            Loads a <see cref="T:QuickFont.QFontData"/> from the font data file
            </summary>
            <param name="filePath">The font data file to load from</param>
            <param name="downSampleFactor">Whether to downsample the font</param>
            <param name="loaderConfig">The font loader configuration</param>
            <returns>The loaded <see cref="T:QuickFont.QFontData"/></returns>
        </member>
        <member name="M:QuickFont.Builder.FirstIntercept(System.Collections.Generic.Dictionary{System.Char,QuickFont.QFontGlyph})">
            <summary>
            Find the first intercept between two glyph bounding boxes
            </summary>
            <param name="charSet">The character set to test</param>
            <returns>The overlapping characters</returns>
        </member>
        <member name="M:QuickFont.Builder.RectangleIntersect(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Returns true if two rectangles intersect
            </summary>
            <param name="r1">The first rectangle</param>
            <param name="r2">The second rectangle</param>
            <returns>True if the rectangles intersect</returns>
        </member>
        <member name="M:QuickFont.Builder.PowerOfTwo(System.Int32)">
            <summary>
            Returns the power of 2 that is closest to x, but not smaller than x.
            </summary>
        </member>
        <member name="T:QuickFont.Configuration.TextGenerationRenderHint">
            <summary>
            Specifies the quality of rendering for fonts
            Only affects GDIFonts
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.TextGenerationRenderHint.AntiAliasGridFit">
            <summary>
            Use AntiAliasGridFit when rendering the ttf character set to create the QFont texture
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.TextGenerationRenderHint.AntiAlias">
            <summary>
            Use AntiAlias when rendering the ttf character set to create the QFont texture
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.TextGenerationRenderHint.SizeDependent">
            <summary>
            Use ClearTypeGridFit if the font is smaller than 12, otherwise use AntiAlias
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.TextGenerationRenderHint.ClearTypeGridFit">
            <summary>
            Use ClearTypeGridFit when rendering the ttf character set to create the QFont texture
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.TextGenerationRenderHint.SystemDefault">
            <summary>
            Use SystemDefault when rendering the ttf character set to create the QFont texture
            </summary>
        </member>
        <member name="T:QuickFont.Configuration.CharacterSet">
            <summary>
            Flags which represent a character set for a language
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.CharacterSet.BasicSet">
            <summary>
             "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890.:,;'\"(!?)+-*/=_{}[]@~#\\&gt;&lt;|^%$£&amp;€°µ"
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.CharacterSet.FrenchQuotes">
            <summary>
             "«»‹›"
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.CharacterSet.SpanishQuestEx">
            <summary>
             "¡¿"
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.CharacterSet.CyrillicSet">
            <summary>
             "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюяљњќћџЉЊЌЋЏ"
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.CharacterSet.ExtendedLatin">
            <summary>
             "ÀŠŽŸžÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ"
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.CharacterSet.GreekAlphabet">
            <summary>
            "ΈΉΊΌΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ"
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.CharacterSet.TurkishI">
            <summary>
            "ıİŞ"
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.CharacterSet.HebrewAlphabet">
            <summary>
            "אבגדהוזחטיכךלמםנןסעפףצץקרשת"
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.CharacterSet.ArabicAlphabet">
            <summary>
            "ںکگپچژڈ¯؛ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîï؟"
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.CharacterSet.ThaiKhmerAlphabet">
            <summary>
            "กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛"
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.CharacterSet.Hiragana">
            <summary>
            "ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをんゔゕゖ゗゘゙゛゜ゝゞゟ"
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.CharacterSet.JapDigits">
            <summary>
            "㆐㆑㆒㆓㆔㆕㆖㆗㆘㆙㆚㆛㆜㆝㆞㆟"
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.CharacterSet.AsianQuotes">
            <summary>
            "「」"
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.CharacterSet.EssentialKanji">
            <summary>
            "⽇⽉" 
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.CharacterSet.Katakana">
            <summary>
            "゠ァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶヷヸヹヺ・ーヽヾヿ"
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.CharacterSet.General">
            <summary>
            Includes the BasicSet, ExtendedLatin, FrenchQuotes and SpanishQuestEx
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.CharacterSet.Cyrillic">
            <summary>
            Includes the BasicSet, CyrillicSet and FrenchQuotes
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.CharacterSet.Greek">
            <summary>
            Includes the BasicSet, GreekAlphabet and FrenchQuotes
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.CharacterSet.Turkish">
            <summary>
            Includes the BasicSet, ExtendedLatin and TurkishI
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.CharacterSet.Hebrew">
            <summary>
            Includes the BasicSet and HebrewAlphabet
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.CharacterSet.Arabic">
            <summary>
            Includes the BasicSet, ArabicAlphabet and FrenchQuotes
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.CharacterSet.Japanese">
            <summary>
            Includes the BasicSet, Hiragana, Katakana, AsianQuotes, JapDigits and EssentialKanji
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.CharacterSet.Thai">
            <summary>
            Includes the BasicSet, ThaiKhmerAlphabet and FrenchQuotes
            </summary>
        </member>
        <member name="T:QuickFont.Configuration.QFontBuilderConfiguration">
            <summary>
            What settings to use when building the font
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.QFontBuilderConfiguration.SuperSampleLevels">
            <summary>
            Whether to use super sampling when building font texture pages
            
            
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.QFontBuilderConfiguration.PageMaxTextureSize">
            <summary>
            The standard max width/height of 2D texture pages this OpenGl context wants to support
            8129 sholud be a minimum. Exact value can be obtained with GL.GetInteger(GetPName.MaxTextureSize);
            page will automatically be cropped if there is extra space.
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.QFontBuilderConfiguration.GlyphMargin">
            <summary>
            The margin (on all sides) around glyphs when rendered to
            their texture page
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.QFontBuilderConfiguration.CharSet">
            <summary>
            Set of characters to support
            </summary>
        </member>
        <member name="P:QuickFont.Configuration.QFontBuilderConfiguration.Characters">
            <summary>
            The character set for this builder configuration
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.QFontBuilderConfiguration.TextGenerationRenderHint">
            <summary>
            Which render hint to use when rendering the ttf character set to create the QFont texture
            </summary>
        </member>
        <member name="M:QuickFont.Configuration.QFontBuilderConfiguration.#ctor">
            <summary>
            Creates a default configuration
            </summary>
        </member>
        <member name="M:QuickFont.Configuration.QFontBuilderConfiguration.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:QuickFont.Configuration.QFontBuilderConfiguration"/>
            </summary>
            <param name="addDropShadow">True to add drop shadow to the font</param>
            <param name="transformToOrthogProjection">OBSOLETE</param>
        </member>
        <member name="M:QuickFont.Configuration.QFontBuilderConfiguration.#ctor(QuickFont.Configuration.QFontConfiguration)">
            <summary>
            Creates a new <see cref="T:QuickFont.Configuration.QFontBuilderConfiguration"/>
            </summary>
            <param name="fontConfiguration">The existing font configuration to use as a base</param>
        </member>
        <member name="M:QuickFont.Configuration.QFontBuilderConfiguration.FigureOutBestCharacterSet">
            <summary>
            Figures the out best character set to be assigned to charSet.
            Depends on current active culture. To be more general we'd use
            the code page and distinct the most used and practically usable
            cultures in terms of their characters in use. Obviuously traditional
            chinese can not be supported well. Due to Texture size limits and even worse due to the
            Kerning infos (which are n² size if n is number of characters).
            </summary>
            <returns></returns>
        </member>
        <member name="T:QuickFont.Configuration.QFontConfiguration">
            <summary>
            Class to hold font configuration data
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.QFontConfiguration.ShadowConfig">
            <summary>
            The shadow configuration
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.QFontConfiguration.KerningConfig">
            <summary>
            The kerning configuration
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.QFontConfiguration.TransformToCurrentOrthogProjection">
            <summary>
            Render the font pixel-prefectly at a size in units of the current orthogonal projection, independent of the viewport pixel size.
            </summary>
        </member>
        <member name="M:QuickFont.Configuration.QFontConfiguration.#ctor">
            <summary>
            Creates a new instance of <see cref="T:QuickFont.Configuration.QFontConfiguration"/>
            </summary>
        </member>
        <member name="M:QuickFont.Configuration.QFontConfiguration.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:QuickFont.Configuration.QFontConfiguration"/>
            </summary>
            <param name="addDropShadow">True to add a drop shadow to the font</param>
            <param name="transformToOrthogProjection">OBSOLETE</param>
        </member>
        <member name="T:QuickFont.Configuration.CharacterKerningRule">
            <summary>
            Kerning Rules
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.CharacterKerningRule.Normal">
            <summary>
            Ordinary kerning
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.CharacterKerningRule.Zero">
            <summary>
            All kerning pairs involving this character will kern by 0. This will
            override both Normal and NotMoreThanHalf for any pair.
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.CharacterKerningRule.NotMoreThanHalf">
            <summary>
            Any kerning pairs involving this character will not kern
            by more than half the minimum width of the two characters 
            involved. This will override Normal for any pair.
            </summary>
        </member>
        <member name="T:QuickFont.Configuration.QFontKerningConfiguration">
            <summary>
            Font kerning configuration
            Only used with GDIFont, FreeTypeFont uses it's own kerning directly from
            the font file
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.QFontKerningConfiguration._characterKerningRules">
            <summary>
            Kerning rules for particular characters
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.QFontKerningConfiguration.AlphaEmptyPixelTolerance">
            <summary>
            When measuring the bounds of glyphs, and performing kerning calculations, 
            this is the minimum alpha level that is necessray for a pixel to be considered
            non-empty. This should be set to a value on the range [0,255]
            </summary>
        </member>
        <member name="M:QuickFont.Configuration.QFontKerningConfiguration.BatchSetCharacterKerningRule(System.String,QuickFont.Configuration.CharacterKerningRule)">
            <summary>
            Sets all characters in the given string to the specified kerning rule.
            </summary>
            <param name="chars"></param>
            <param name="rule"></param>
        </member>
        <member name="M:QuickFont.Configuration.QFontKerningConfiguration.SetCharacterKerningRule(System.Char,QuickFont.Configuration.CharacterKerningRule)">
            <summary>
            Sets the specified character kerning rule.
            </summary>
            <param name="c"></param>
            <param name="rule"></param>
        </member>
        <member name="M:QuickFont.Configuration.QFontKerningConfiguration.GetCharacterKerningRule(System.Char)">
            <summary>
            Returns the kerning rule corresponding to the character.
            </summary>
            <param name="c">The character to return the kerning rule for</param>
            <returns>The kerning rule corresponding to the given character</returns>
        </member>
        <member name="M:QuickFont.Configuration.QFontKerningConfiguration.GetOverridingCharacterKerningRuleForPair(System.String)">
            <summary>
            Given a pair of characters, this will return the overriding 
            CharacterKerningRule.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:QuickFont.Configuration.QFontKerningConfiguration.#ctor">
            <summary>
            Default kerning constructor
            </summary>
        </member>
        <member name="T:QuickFont.Configuration.ShadowType">
            <summary>
            Shadow Type
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.ShadowType.Blurred">
            <summary>
            Blur the font to create a shadow
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.ShadowType.Expanded">
            <summary>
            Expand the font to create a shadow
            </summary>
        </member>
        <member name="T:QuickFont.Configuration.QFontShadowConfiguration">
            <summary>
            The configuration used when building a font drop shadow.
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.QFontShadowConfiguration.Scale">
            <summary>
            Scale in relation to the actual font glyphs
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.QFontShadowConfiguration.Type">
            <summary>
            if type is blurred then font is blurred with gaussian blur
            if type is expanded letter is expanded in every direction by given amount of pixels
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.QFontShadowConfiguration.BlurRadius">
            <summary>
            The blur radius. Caution: high values will greatly impact the 
            time it takes to build a font shadow
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.QFontShadowConfiguration.BlurPasses">
            <summary>
            Number of blur passes. Caution: high values will greatly impact the 
            time it takes to build a font shadow
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.QFontShadowConfiguration.PageMaxTextureSize">
            <summary>
            The standard max width/height of 2D texture pages this OpenGl context wants to support
            8129 sholud be a minimum. Exact value can be obtained with GL.GetInteger(GetPName.MaxTextureSize);
            page will automatically be cropped if there is extra space.
            </summary>
        </member>
        <member name="F:QuickFont.Configuration.QFontShadowConfiguration.GlyphMargin">
            <summary>
            The margin (on all sides) around glyphs when rendered to
            their texture page. Note this is in addition to 3xblurRadius margin
            which is automatically added.
            </summary>
        </member>
        <member name="T:QuickFont.FreeTypeFont">
            <summary>
            An implementation of <see cref="T:QuickFont.IFont"/> that uses FreeType via
            SharpFont to load the font file. This implementation supports reading
            kerning information directly from the font file.
            </summary>
        </member>
        <member name="P:QuickFont.FreeTypeFont.Size">
            <summary>
            The size of the font
            </summary>
        </member>
        <member name="P:QuickFont.FreeTypeFont.HasKerningInformation">
            <summary>
            Whether the font has kerning information available, or if it needs
            to be calculated
            </summary>
        </member>
        <member name="M:QuickFont.FreeTypeFont.#ctor(System.String,System.Single,System.Drawing.FontStyle,System.Int32,System.Single)">
            <summary>
            Creates a new instace of FreeTypeFont
            </summary>
            <param name="fontPath">The path to the font file</param>
            <param name="size">Size of the font</param>
            <param name="style">Style of the font</param>
            <param name="superSampleLevels">Super sample levels</param>
            <param name="scale">Scale</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:QuickFont.FreeTypeFont.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:QuickFont.FreeTypeFont.DrawString(System.String,System.Drawing.Graphics,System.Drawing.Brush,System.Int32,System.Int32)">
            <summary>
            Draws the given string at the specified location
            </summary>
            <param name="s">The string to draw</param>
            <param name="graph">The graphics surface to draw the string on to</param>
            <param name="color">The color of the text</param>
            <param name="x">The x position of the string</param>
            <param name="y">The y position of the string</param>
            <returns>Returns the offset of the glyph from the given x and y. Only non-zero with <see cref="T:QuickFont.FreeTypeFont"/></returns>
        </member>
        <member name="M:QuickFont.FreeTypeFont.GetKerning(System.Char,System.Char)">
            <summary>
            Gets the kerning between the given characters, if the font supports it
            </summary>
            <param name="c1">The first character of the character pair</param>
            <param name="c2">The second character of the character pair</param>
            <returns>The horizontal kerning offset of the character pair</returns>
        </member>
        <member name="M:QuickFont.FreeTypeFont.MeasureString(System.String,System.Drawing.Graphics)">
            <summary>
            Measures the given string and returns the size
            </summary>
            <param name="s">The string to measure</param>
            <param name="graph">The graphics surface to use for temporary purposes</param>
            <returns>The size of the given string</returns>
        </member>
        <member name="M:QuickFont.FreeTypeFont.Dispose(System.Boolean)">
            <summary>
            Dispose resources 
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:QuickFont.FreeTypeFont.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:QuickFont.GDIFont">
            <summary>
            An implementation of <see cref="T:QuickFont.IFont"/> that uses the GDI system to 
            load fonts (aka System.Drawing). This method does not work for loading
            custom fonts on Mono, and hence FreeType is required for those
            </summary>
        </member>
        <member name="P:QuickFont.GDIFont.Size">
            <summary>
            The size of the font
            </summary>
        </member>
        <member name="P:QuickFont.GDIFont.HasKerningInformation">
            <summary>
            Whether the font has kerning information available, or if it needs
            to be calculated
            </summary>
        </member>
        <member name="M:QuickFont.GDIFont.#ctor(System.String,System.Single,System.Drawing.FontStyle,System.Int32,System.Single)">
            <summary>
                Creates a GDI+ Font from the specified font file
            </summary>
            <param name="fontPath">The path to the font file</param>
            <param name="size">The size of the font</param>
            <param name="style">The font style</param>
            <param name="superSampleLevels">The super sample level of the font</param>
            <param name="scale">The scale of the font</param>
        </member>
        <member name="M:QuickFont.GDIFont.DrawString(System.String,System.Drawing.Graphics,System.Drawing.Brush,System.Int32,System.Int32)">
            <summary>
            Draws the given string at the specified location
            </summary>
            <param name="s">The string to draw</param>
            <param name="graph">The graphics surface to draw the string on to</param>
            <param name="color">The color of the text</param>
            <param name="x">The x position of the string</param>
            <param name="y">The y position of the string</param>
            <returns>Returns the offset of the glyph from the given x and y. Only non-zero with <see cref="T:QuickFont.FreeTypeFont"/></returns>
        </member>
        <member name="M:QuickFont.GDIFont.GetKerning(System.Char,System.Char)">
            <summary>
            Gets the kerning between the given characters, if the font supports it
            </summary>
            <param name="c1">The first character of the character pair</param>
            <param name="c2">The second character of the character pair</param>
            <returns>The horizontal kerning offset of the character pair</returns>
        </member>
        <member name="M:QuickFont.GDIFont.MeasureString(System.String,System.Drawing.Graphics)">
            <summary>
            Measures the given string and returns the size
            </summary>
            <param name="s">The string to measure</param>
            <param name="graph">The graphics surface to use for temporary purposes</param>
            <returns>The size of the given string</returns>
        </member>
        <member name="M:QuickFont.GDIFont.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:QuickFont.GDIFont.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:QuickFont.Helper">
            <summary>
            A helper class containing some useful static methods
            </summary>
        </member>
        <member name="M:QuickFont.Helper.ToArray``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Returns an array copy of <see cref="T:System.Collections.Generic.ICollection`1"/>
            </summary>
            <typeparam name="T">The type of the collection item</typeparam>
            <param name="collection">The collection to copy</param>
            <returns>The <see cref="T:System.Collections.Generic.ICollection`1"/> copied to an array</returns>
        </member>
        <member name="M:QuickFont.Helper.SafeGLEnable(OpenTK.Graphics.ES20.EnableCap,System.Action)">
            <summary>
            Ensures that state is disabled
            </summary>
            <param name="cap"></param>
            <param name="code"></param>
        </member>
        <member name="M:QuickFont.Helper.SafeGLEnable(OpenTK.Graphics.ES20.EnableCap[],System.Action)">
            <summary>
            Ensures that multiple states are disabled
            </summary>
            <param name="caps"></param>
            <param name="code"></param>
        </member>
        <member name="M:QuickFont.Helper.ToRgba(System.Drawing.Color)">
            <summary>
            Converts the given <see cref="T:System.Drawing.Color"/> to RGBA
            <para/>
            Colour bytes are converted with
            <c>color.A &lt;&lt; 24 | color.B &lt;&lt; 16 | color.G &lt;&lt; 8 | color.R</c>
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> to convert</param>
            <returns>The 32-bit RGBA values of the colour</returns>
        </member>
        <member name="M:QuickFont.Helper.ToVector4(System.Drawing.Color)">
            <summary>
            Converts the given <see cref="T:System.Drawing.Color"/> to a <see cref="T:OpenTK.Vector4"/>,
            such that XYZW = RGBA.
            <para></para>
            Vector values are normalized between 0.0 and 1.0
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> to convert</param>
            <returns>The <see cref="T:OpenTK.Vector4"/> of the color</returns>
        </member>
        <member name="T:QuickFont.IFont">
            <summary>
            Represents a font
            </summary>
        </member>
        <member name="M:QuickFont.IFont.MeasureString(System.String,System.Drawing.Graphics)">
            <summary>
            Measures the given string and returns the size
            </summary>
            <param name="s">The string to measure</param>
            <param name="graph">The graphics surface to use for temporary purposes</param>
            <returns>The size of the given string</returns>
        </member>
        <member name="P:QuickFont.IFont.Size">
            <summary>
            The size of the font
            </summary>
        </member>
        <member name="P:QuickFont.IFont.HasKerningInformation">
            <summary>
            Whether the font has kerning information available, or if it needs
            to be calculated
            </summary>
        </member>
        <member name="M:QuickFont.IFont.DrawString(System.String,System.Drawing.Graphics,System.Drawing.Brush,System.Int32,System.Int32)">
            <summary>
            Draws the given string at the specified location
            </summary>
            <param name="s">The string to draw</param>
            <param name="graph">The graphics surface to draw the string on to</param>
            <param name="color">The color of the text</param>
            <param name="x">The x position of the string</param>
            <param name="y">The y position of the string</param>
            <returns>Returns the offset of the glyph from the given x and y. Only non-zero with <see cref="T:QuickFont.FreeTypeFont"/></returns>
        </member>
        <member name="M:QuickFont.IFont.GetKerning(System.Char,System.Char)">
            <summary>
            Gets the kerning between the given characters, if the font supports it
            </summary>
            <param name="c1">The first character of the character pair</param>
            <param name="c2">The second character of the character pair</param>
            <returns>The horizontal kerning offset of the character pair</returns>
        </member>
        <member name="T:QuickFont.KerningCalculator">
            <summary>
            Static methods for calculating kerning
            </summary>
        </member>
        <member name="M:QuickFont.KerningCalculator.Kerning(QuickFont.QFontGlyph,QuickFont.QFontGlyph,QuickFont.KerningCalculator.XLimits[],QuickFont.KerningCalculator.XLimits[],QuickFont.Configuration.QFontKerningConfiguration,QuickFont.IFont)">
            <summary>
            Calculate the kerning between two glyphs
            </summary>
            <param name="g1">The first glyph</param>
            <param name="g2">The second glyph</param>
            <param name="lim1">The first glyph limits</param>
            <param name="lim2">The second glyph limits</param>
            <param name="config">The kerning configuration to use</param>
            <param name="font">The glyph's <see cref="T:QuickFont.IFont"/></param>
            <returns>The x coordinate kerning offset</returns>
        </member>
        <member name="M:QuickFont.KerningCalculator.CalculateKerning(System.Char[],QuickFont.QFontGlyph[],System.Collections.Generic.List{QuickFont.QBitmap},QuickFont.Configuration.QFontKerningConfiguration,QuickFont.IFont)">
            <summary>
            Calculates the kerning values for the given character set
            </summary>
            <param name="charSet">The character set to calculate kerning values for</param>
            <param name="glyphs">The glyphs used for kerning</param>
            <param name="bitmapPages">The bitmap pages of the glyphs</param>
            <param name="config">The kerning configuration</param>
            <param name="font">The <see cref="T:QuickFont.IFont"/> used to create the glyphs and bitmaps</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> mapping of every glyph pair to a kerning amount</returns>
        </member>
        <member name="T:QuickFont.QBitmap">
            <summary>
            The <see cref="T:QuickFont.QBitmap"/> class. Used for font bitmaps
            </summary>
        </member>
        <member name="F:QuickFont.QBitmap.Bitmap">
            <summary>
            The <see cref="T:QuickFont.QBitmap"/>'s Bitmap
            </summary>
        </member>
        <member name="F:QuickFont.QBitmap.BitmapData">
            <summary>
            The <see cref="T:QuickFont.QBitmap"/>'s BitmapData
            </summary>
        </member>
        <member name="M:QuickFont.QBitmap.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:QuickFont.QBitmap"/> class from the 
            given file path
            </summary>
            <param name="filePath">The file to load the bitmap from</param>
        </member>
        <member name="M:QuickFont.QBitmap.#ctor(System.Drawing.Bitmap)">
            <summary>
            Creates a new instance of the <see cref="T:QuickFont.QBitmap"/> class from an 
            existing bitmap
            </summary>
            <param name="bitmap">The existing bitmap to use</param>
        </member>
        <member name="M:QuickFont.QBitmap.LockBits(System.Drawing.Bitmap)">
            <summary>
            Lock the bitmap bits
            </summary>
            <param name="bitmap">The bitmap to lock</param>
        </member>
        <member name="M:QuickFont.QBitmap.Clear32(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Clear the bitmap to the specified RGBA values
            </summary>
            <param name="r">The red value</param>
            <param name="g">The green value</param>
            <param name="b">The blue value</param>
            <param name="a">The alpha value</param>
        </member>
        <member name="M:QuickFont.QBitmap.EmptyPixel(System.Drawing.Imaging.BitmapData,System.Int32,System.Int32)">
            <summary>
            Returns true if the given pixel is empty (i.e. black)
            </summary>
            <param name="bitmapData">The bitmap data</param>
            <param name="px">The pixel x coordinate</param>
            <param name="py">The pixel y coordinate</param>
        </member>
        <member name="M:QuickFont.QBitmap.EmptyAlphaPixel(System.Drawing.Imaging.BitmapData,System.Int32,System.Int32,System.Byte)">
            <summary>
            Returns true if the given pixel is empty (i.e. alpha is zero)
            </summary>
            <param name="bitmapData">The bitmap data</param>
            <param name="px">The pixel x coordinate</param>
            <param name="py">The pixel y coordinate</param>
            <param name="alphaEmptyPixelTolerance">The pixel alpha tolerance below which to consider the pixel empty</param>
        </member>
        <member name="M:QuickFont.QBitmap.BlitMask(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Blits a block of a bitmap data from source to destination, using the luminance of the source to determine the 
            alpha of the target. Source must be 24-bit, target must be 32-bit.
            </summary>
            <param name="source">The source bitmap data</param>
            <param name="target">The target bitmap data</param>
            <param name="srcPx">The source rectangle x coordinate</param>
            <param name="srcPy">The source rectangle y coordinate</param>
            <param name="srcW">The source rectangle width</param>
            <param name="srcH">The source rectangle height</param>
            <param name="px">The destination rectangle x coordinate</param>
            <param name="py">The destination rectangle y coordinate</param>
        </member>
        <member name="M:QuickFont.QBitmap.Blit(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData,System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
            Blits from source to target. Both source and target must be 32-bit
            </summary>
            <param name="source">The source bitmap data</param>
            <param name="target">The destination bitmap data</param>
            <param name="sourceRect">The source rectangle</param>
            <param name="px">The destination rectangle x coordinate</param>
            <param name="py">The desination rectangle y coordinate</param>
        </member>
        <member name="M:QuickFont.QBitmap.Blit(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Blits from source to target. Both source and target must be 32-bit
            </summary>
            <param name="source">The source bitmap data</param>
            <param name="target">The target bitmap data</param>
            <param name="srcPx">The source rectangle x coordinate</param>
            <param name="srcPy">The source rectangle y coordinate</param>
            <param name="srcW">The source rectangle width</param>
            <param name="srcH">The source rectangle height</param>
            <param name="destX">The destination rectangle x coordinate</param>
            <param name="destY">The destination rectangle y coordinate</param>
        </member>
        <member name="M:QuickFont.QBitmap.PutPixel32(System.Int32,System.Int32,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Changes the specified pixel to the given RGBA values
            </summary>
            <param name="px">The pixel x coordinate</param>
            <param name="py">The pixel y coordinate</param>
            <param name="r">The new pixel R value</param>
            <param name="g">The new pixel G value</param>
            <param name="b">The new pixel B value</param>
            <param name="a">The new pixel A value</param>
        </member>
        <member name="M:QuickFont.QBitmap.GetPixel32(System.Int32,System.Int32,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Returns the RGBA values of the specified pixel
            </summary>
            <param name="px">The pixel x coordinate</param>
            <param name="py">The pixel y coordinate</param>
            <param name="r">The pixel's R value</param>
            <param name="g">The pixel's G value</param>
            <param name="b">The pixel's B value</param>
            <param name="a">The pixel's A value</param>
        </member>
        <member name="M:QuickFont.QBitmap.PutAlpha32(System.Int32,System.Int32,System.Byte)">
            <summary>
            Change the alpha value of the specified pixel
            </summary>
            <param name="px">The pixel x coordinate</param>
            <param name="py">The pixel y coordinate</param>
            <param name="a">The new pixel A value</param>
        </member>
        <member name="M:QuickFont.QBitmap.GetAlpha32(System.Int32,System.Int32,System.Byte@)">
            <summary>
            Return the alpha value of the specified pixel
            </summary>
            <param name="px">The pixel x coordinate</param>
            <param name="py">The pixel y coordinate</param>
            <param name="a">The pixel's A value</param>
        </member>
        <member name="M:QuickFont.QBitmap.DownScale32(System.Int32,System.Int32)">
            <summary>
            Downscale the 32-bit <see cref="F:QuickFont.QBitmap.Bitmap"/> of this <see cref="T:QuickFont.QBitmap"/> to the specified width and height
            </summary>
            <param name="newWidth">The new width of the bitmap</param>
            <param name="newHeight">The new height of the bitmap</param>
        </member>
        <member name="M:QuickFont.QBitmap.Colour32(System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets colour of the <see cref="T:QuickFont.QBitmap"/> without touching alpha values
            </summary>
            <param name="r">The new R value</param>
            <param name="g">The new G value</param>
            <param name="b">The new B value</param>
        </member>
        <member name="M:QuickFont.QBitmap.ExpandAlpha(System.Int32,System.Int32)">
            <summary>
            Expand the alpha values of this <see cref="T:QuickFont.QBitmap"/>
            </summary>
            <param name="radius">The expansion radius</param>
            <param name="passes">Number of expansion passes</param>
        </member>
        <member name="M:QuickFont.QBitmap.BlurAlpha(System.Int32,System.Int32)">
            <summary>
            Blur the alpha values of this <see cref="T:QuickFont.QBitmap"/>
            </summary>
            <param name="radius">The blur radius</param>
            <param name="passes">The blur passes</param>
        </member>
        <member name="M:QuickFont.QBitmap.Free">
            <summary>
            Frees the resources belonging to this <see cref="T:QuickFont.QBitmap"/>
            </summary>
        </member>
        <member name="T:QuickFont.QFont">
            <summary>
            A font resource that holds the necessary data for rendering text
            </summary>
        </member>
        <member name="P:QuickFont.QFont.MaxLineHeight">
            <summary>
            The maximum line height for the glyph set, unscaled
            </summary>
        </member>
        <member name="P:QuickFont.QFont.MaxGlyphHeight">
            <summary>
            The maximum glyph height for the glyph set, unscaled
            </summary>
        </member>
        <member name="P:QuickFont.QFont.FontData">
            <summary>
            The <see cref="T:QuickFont.QFontData"/> corresponding to this <see cref="T:QuickFont.QFont"/>
            </summary>
        </member>
        <member name="P:QuickFont.QFont.FontName">
            <summary>
            The name of this <see cref="T:QuickFont.QFont"/>
            </summary>
        </member>
        <member name="M:QuickFont.QFont.#ctor(QuickFont.IFont,QuickFont.Configuration.QFontBuilderConfiguration)">
            <summary>
                Initialise QFont from a <see cref="T:QuickFont.IFont"/> object
            </summary>
            <param name="font">The font object used to create this <see cref="T:QuickFont.QFont"/></param>
            <param name="config">The font builder configuration</param>
        </member>
        <member name="M:QuickFont.QFont.#ctor(System.String,System.Single,QuickFont.Configuration.QFontBuilderConfiguration,System.Drawing.FontStyle)">
            <summary>
            Initialise QFont from a font file
            </summary>
            <param name="fontPath">The font file to load</param>
            <param name="size">The size</param>
            <param name="config">The configuration</param>
            <param name="style">The style</param>
        </member>
        <member name="M:QuickFont.QFont.#ctor(System.String,QuickFont.Configuration.QFontConfiguration,System.Single)">
            <summary>
                Initialise QFont from a .qfont file
            </summary>
            <param name="qfontPath">The .qfont file to load</param>
            <param name="loaderConfig">The loader configuration</param>
            <param name="downSampleFactor">The downsampling factor</param>
        </member>
        <member name="M:QuickFont.QFont.InitialiseQFont(QuickFont.IFont,QuickFont.Configuration.QFontBuilderConfiguration,QuickFont.QFontData)">
            <summary>
            Initialises the <see cref="T:QuickFont.QFont"/> using the specified <see cref="T:QuickFont.IFont"/>
            </summary>
            <param name="font">The <see cref="T:QuickFont.IFont"/> to use</param>
            <param name="config">The builder configuration</param>
            <param name="data">The <see cref="T:QuickFont.QFontData"/> to use</param>
        </member>
        <member name="M:QuickFont.QFont.CreateTextureFontFiles(QuickFont.IFont,System.String,QuickFont.Configuration.QFontBuilderConfiguration)">
            <summary>
            Create the texture font files and save them to the specified file name
            </summary>
            <param name="font">The <see cref="T:QuickFont.IFont"/> object that is used to build the font</param>
            <param name="newFontName">The font file name</param>
            <param name="config">The builder configuration</param>
        </member>
        <member name="M:QuickFont.QFont.CreateTextureFontFiles(System.String,System.Single,System.String,QuickFont.Configuration.QFontBuilderConfiguration,System.Drawing.FontStyle)">
            <summary>
            Create the texture font files from the specified font file
            </summary>
            <param name="fileName">The font file to use to build the font</param>
            <param name="size">The font size</param>
            <param name="newFontName">The generated texture font file name</param>
            <param name="config">The builder configuration</param>
            <param name="style">The desired font style</param>
        </member>
        <member name="M:QuickFont.QFont.GetFont(System.String,System.Single,System.Drawing.FontStyle,System.Int32,System.Single)">
            <summary>
            Returns an <see cref="T:QuickFont.IFont"/> object for the given parameters. Handles
            whether font file exists in <see cref="T:System.Drawing.Text.InstalledFontCollection"/> or not
            </summary>
            <param name="fontPath">The font path or font name</param>
            <param name="size">The desired font size</param>
            <param name="style">The desired font style</param>
            <param name="superSampleLevels">The desired supersample levels</param>
            <param name="scale">The desired font scale</param>
            <returns>The created <see cref="T:QuickFont.IFont"/></returns>
        </member>
        <member name="M:QuickFont.QFont.BuildFont(QuickFont.IFont,QuickFont.Configuration.QFontBuilderConfiguration,System.String)">
            <summary>
            Builds the <see cref="T:QuickFont.QFontData"/> for the given <see cref="T:QuickFont.IFont"/>
            </summary>
            <param name="font">The <see cref="T:QuickFont.IFont"/> to use to build the <see cref="T:QuickFont.QFontData"/></param>
            <param name="config">The builder configuration</param>
            <param name="saveName">
            The file name to save the font too. If null, the font is not saved
            </param>
            <returns>The build <see cref="T:QuickFont.QFontData"/></returns>
        </member>
        <member name="M:QuickFont.QFont.Dispose">
            <summary>
            Dispose the resources used by this <see cref="T:QuickFont.QFont"/> object
            </summary>
        </member>
        <member name="M:QuickFont.QFont.Dispose(System.Boolean)">
            <summary>
            Dispose the resources used by this <see cref="T:QuickFont.QFont"/> object
            </summary>
            <param name="disposing">Whether we are actually disposing</param>
        </member>
        <member name="M:QuickFont.QFont.Measure(System.String,System.Drawing.SizeF,QuickFont.QFontAlignment)">
            <summary>
            Measures the specified text. Helper method delegating functionality.
            </summary>
            <param name="text">The text.</param>
            <param name="maxSize">The maximum size.</param>
            <param name="alignment">The alignment.</param>
            <returns>Measured size</returns>
        </member>
        <member name="M:QuickFont.QFont.Measure(System.String,System.Single,QuickFont.QFontAlignment)">
            <summary>
            Measures the specified text. Helper method delegating functionality.
            </summary>
            <param name="text">The text.</param>
            <param name="maxWidth">The maximum width.</param>
            <param name="alignment">The alignment.</param>
            <returns>
            Measured size.
            </returns>
        </member>
        <member name="M:QuickFont.QFont.Measure(QuickFont.ProcessedText)">
            <summary>
            Measures the specified text. Helper method delegating functionality.
            </summary>
            <param name="processedText">The processed text.</param>
            <returns>
            Measured size.
            </returns>
        </member>
        <member name="M:QuickFont.QFont.Measure(System.String,QuickFont.QFontAlignment)">
            <summary>
            Measures the specified text. Helper method delegating functionality.
            </summary>
            <param name="text">The text.</param>
            <param name="alignment">The alignment.</param>
            <returns>
            Measured size.
            </returns>
        </member>
        <member name="T:QuickFont.QFontData">
            <summary>
            This class holds all the necessary font data
            </summary>
        </member>
        <member name="F:QuickFont.QFontData.KerningPairs">
            <summary>
            Mapping from a pair of characters to a pixel offset
            </summary>
        </member>
        <member name="F:QuickFont.QFontData.Pages">
            <summary>
            List of texture pages
            </summary>
        </member>
        <member name="F:QuickFont.QFontData.CharSetMapping">
            <summary>
            Mapping from character to glyph index
            </summary>
        </member>
        <member name="F:QuickFont.QFontData.MeanGlyphWidth">
            <summary>
            The average glyph width
            </summary>
        </member>
        <member name="F:QuickFont.QFontData.MaxGlyphHeight">
            <summary>
            The maximum glyph height
            </summary>
        </member>
        <member name="F:QuickFont.QFontData.MaxLineHeight">
            <summary>
            The maximum line height
            </summary>
        </member>
        <member name="F:QuickFont.QFontData.DropShadowFont">
            <summary>
            Null if no dropShadowFont is available
            </summary>
        </member>
        <member name="F:QuickFont.QFontData.IsDropShadow">
            <summary>
            true if this font is dropShadowFont
            </summary>
        </member>
        <member name="F:QuickFont.QFontData.NaturallyMonospaced">
            <summary>
            Whether the original font (from ttf) was detected to be monospaced
            </summary>
        </member>
        <member name="M:QuickFont.QFontData.IsMonospacingActive(QuickFont.QFontRenderOptions)">
            <summary>
            Whether this font is being rendered as monospaced
            </summary>
            <param name="options">The render options</param>
            <returns>True if the font is rendered as monospaced</returns>
        </member>
        <member name="M:QuickFont.QFontData.GetMonoSpaceWidth(QuickFont.QFontRenderOptions)">
            <summary>
            Returns the monospace width
            </summary>
            <param name="options">The font rendering options</param>
            <returns>The monospace width</returns>
        </member>
        <member name="M:QuickFont.QFontData.Serialize">
            <summary>
            Serialize this <see cref="T:QuickFont.QFontData"/> to a collection of <see cref="T:System.String"/>s
            </summary>
            <returns>The serialized <see cref="T:QuickFont.QFontData"/></returns>
        </member>
        <member name="M:QuickFont.QFontData.Deserialize(System.Collections.Generic.List{System.String},System.Int32@,System.Char[]@)">
            <summary>
            Deserialize a <see cref="T:QuickFont.QFontData"/> object, given the serialized data
            </summary>
            <param name="input">The serialized data</param>
            <param name="pageCount">The number of texture pages</param>
            <param name="charSet">The character set supported by this <see cref="T:QuickFont.QFontData"/></param>
        </member>
        <member name="M:QuickFont.QFontData.CalculateMeanWidth">
            <summary>
            Calculate the mean width of all glyphs in this <see cref="T:QuickFont.QFontData"/>
            </summary>
        </member>
        <member name="M:QuickFont.QFontData.CalculateMaxHeight">
            <summary>
            Calculate the mean height of all glyphs in this <see cref="T:QuickFont.QFontData"/>
            </summary>
        </member>
        <member name="M:QuickFont.QFontData.GetKerningPairCorrection(System.Int32,System.String,QuickFont.TextNode)">
            <summary>
            Returns the kerning length correction for the character at the given index in the given string.
            Also, if the text is part of a textNode list, the nextNode is given so that the following 
            node can be checked incase of two adjacent word nodes.
            </summary>
            <param name="index">The character index into the string</param>
            <param name="text">The string of text containing the character to kern</param>
            <param name="textNode">The next text node</param>
            <returns>The kerning correction for the character pair</returns>
        </member>
        <member name="M:QuickFont.QFontData.Dispose">
            <summary>
            Frees all resources used by this <see cref="T:QuickFont.QFontData"/> object
            </summary>
        </member>
        <member name="T:QuickFont.QFontDrawing">
            <summary>
            <see cref="T:QuickFont.QFontDrawing"/> manages a collection of <see cref="T:QuickFont.QFontDrawingPrimitive"/>'s
            and handles printing text to the screen
            </summary>
        </member>
        <member name="F:QuickFont.QFontDrawing.VertexArrayObject">
            <summary>
            The <see cref="T:QuickFont.QVertexArrayObject"/> used by this <see cref="T:QuickFont.QFontDrawing"/>
            </summary>
        </member>
        <member name="M:QuickFont.QFontDrawing.#ctor(System.Boolean,QuickFont.QFontSharedState)">
            <summary>
            Creates a new instance of <see cref="T:QuickFont.QFontDrawing"/>
            </summary>
            <param name="useDefaultBlendFunction">Whether to use the default blend function</param>
            <param name="state">The QFontSharedState of this object. If null, will use the static state</param>
        </member>
        <member name="P:QuickFont.QFontDrawing.SharedState">
            <summary>
            The static shared state for all <see cref="T:QuickFont.QFontDrawing"/> objects
            </summary>
        </member>
        <member name="P:QuickFont.QFontDrawing.InstanceSharedState">
            <summary>
            Returns the instance shared state if it exists, otherwise
            returns the static shared state
            </summary>
        </member>
        <member name="P:QuickFont.QFontDrawing.ProjectionMatrix">
            <summary>
            The projection matrix used for text rendering
            </summary>
        </member>
        <member name="P:QuickFont.QFontDrawing.DrawingPrimitives">
            <summary>
            A list of <see cref="T:QuickFont.QFontDrawingPrimitive"/>'s that will be drawn
            when the <see cref="M:QuickFont.QFontDrawing.Draw"/> method is called
            </summary>
        </member>
        <member name="M:QuickFont.QFontDrawing.LoadShaderFromResource(System.String)">
            <summary>
            Load shader string from resource
            </summary>
            <param name="path">filename of Shader</param>
            <returns>The loaded shader</returns>
        </member>
        <member name="M:QuickFont.QFontDrawing.InitialiseStaticState">
            <summary>
                Initializes the static shared render state using builtin shaders
            </summary>
        </member>
        <member name="M:QuickFont.QFontDrawing.InitialiseState(QuickFont.QFontSharedState)">
            <summary>
                Initialises the instance render state
            </summary>
            <param name="state">
                If state is null, this method will instead initialise the static state, which is returned when no
                instance state is set
            </param>
        </member>
        <member name="M:QuickFont.QFontDrawing.Draw">
            <summary>
            Helper method to reduce lines of code related to simple font drawing.
            Calls Begin(), then LoadVBOs(), then DrawVBOs(), then End()
            </summary>
        </member>
        <member name="M:QuickFont.QFontDrawing.DisableShader">
            <summary>
            Bind the 0'th shader and disable the attributes used
            </summary>
        </member>
        <member name="M:QuickFont.QFontDrawing.RefreshViewport">
            <summary>
                Invalidates the internally cached viewport, causing it to be
                reread the next time it is required. This should be called
                if the viewport (is resized?) and text is to be rendered to the new
                viewport.
            </summary>
        </member>
        <member name="M:QuickFont.QFontDrawing.RefreshBuffers">
            <summary>
            Refreshes the buffers with the current state of the 'font'drawing 
            as defined in DrawingPrimitives
            </summary>
        </member>
        <member name="M:QuickFont.QFontDrawing.Print(QuickFont.QFont,QuickFont.ProcessedText,OpenTK.Vector3,QuickFont.QFontRenderOptions)">
            <summary>
            Prints the specified text with the given render options
            </summary>
            <param name="font">The <see cref="T:QuickFont.QFont"/> to print the text with</param>
            <param name="text">The text to print</param>
            <param name="position">The position of the text</param>
            <param name="opt">The text render options</param>
            <returns>The size of the printed text</returns>
        </member>
        <member name="M:QuickFont.QFontDrawing.Print(QuickFont.QFont,QuickFont.ProcessedText,OpenTK.Vector3,System.Nullable{System.Drawing.Color})">
            <summary>
            Prints the specified text
            </summary>
            <param name="font">The <see cref="T:QuickFont.QFont"/> to print the text with</param>
            <param name="processedText">The processed text to print</param>
            <param name="position">The position of the text</param>
            <param name="colour">The colour of the text</param>
            <returns>The size of the printed text</returns>
        </member>
        <member name="M:QuickFont.QFontDrawing.Print(QuickFont.QFont,System.String,OpenTK.Vector3,QuickFont.QFontAlignment,QuickFont.QFontRenderOptions)">
            <summary>
            Prints the specified text with the given alignment and render options
            </summary>
            <param name="font">The <see cref="T:QuickFont.QFont"/> to print the text with</param>
            <param name="text">The text to print</param>
            <param name="position">The position of the text</param>
            <param name="alignment">The alignment of the text</param>
            <param name="opt">The render options</param>
            <returns>The size of the printed text</returns>
        </member>
        <member name="M:QuickFont.QFontDrawing.Print(QuickFont.QFont,System.String,OpenTK.Vector3,QuickFont.QFontAlignment,System.Nullable{System.Drawing.Color},System.Drawing.Rectangle)">
            <summary>
            Prints the specified text with the given alignment, color and clipping rectangle
            </summary>
            <param name="font">The <see cref="T:QuickFont.QFont"/> to print the text with</param>
            <param name="text">The text to print</param>
            <param name="position">The position of the text</param>
            <param name="alignment">The alignment of the text</param>
            <param name="color">The colour of the text</param>
            <param name="clippingRectangle">The clipping rectangle to scissor test the text with</param>
            <returns>The size of the printed text</returns>
        </member>
        <member name="M:QuickFont.QFontDrawing.Print(QuickFont.QFont,System.String,OpenTK.Vector3,System.Drawing.SizeF,QuickFont.QFontAlignment,System.Drawing.Rectangle)">
            <summary>
            Prints the specified text with the given maximum size, alignment and clipping rectangle
            </summary>
            <param name="font">The <see cref="T:QuickFont.QFont"/> to print the text with</param>
            <param name="text">The text to print</param>
            <param name="position">The position of the text</param>
            <param name="maxSize">The maximum bounding size of the text</param>
            <param name="alignment">The text alignment</param>
            <param name="clippingRectangle">The clipping rectangle to scissor test the text with</param>
            <returns>The size of the printed text</returns>
        </member>
        <member name="M:QuickFont.QFontDrawing.Print(QuickFont.QFont,System.String,OpenTK.Vector3,System.Drawing.SizeF,QuickFont.QFontAlignment,QuickFont.QFontRenderOptions)">
            <summary>
            Prints the specified text with the given maximum size, alignment and render options
            </summary>
            <param name="font">The <see cref="T:QuickFont.QFont"/> to print the text with</param>
            <param name="text">The text to print</param>
            <param name="position">The position of the text</param>
            <param name="maxSize">The maximum bounding size of the text</param>
            <param name="alignment">The text alignment</param>
            <param name="opt">The render options</param>
            <returns>The size of the printed text</returns>
        </member>
        <member name="F:QuickFont.QFontDrawing._disposed">
            <summary>
            Track whether <see cref="M:QuickFont.QFontDrawing.Dispose"/> has been called
            </summary>
        </member>
        <member name="M:QuickFont.QFontDrawing.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            Do not make this method virtual. A derived class should not be able to override this method
            </summary>
        </member>
        <member name="M:QuickFont.QFontDrawing.Dispose(System.Boolean)">
            <summary>
            Handles disposing objects
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:QuickFont.ShaderVariables">
            <summary>
            Holds the shader state
            </summary>
        </member>
        <member name="M:QuickFont.ShaderVariables.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new instance of <see cref="T:QuickFont.ShaderVariables"/>
            </summary>
            <param name="shaderProgram">The shader program</param>
            <param name="mvpUniformLocation">The model-view-projection matrix uniform location</param>
            <param name="textureCoordAttribLocation">The texture coordinate attribute location</param>
            <param name="positionCoordAttribLocation">The position coordinate attribute location</param>
            <param name="samplerLocation">The texture sample location</param>
            <param name="colorCoordAttribLocation">The color coordinate attribute location</param>
        </member>
        <member name="P:QuickFont.ShaderVariables.ShaderProgram">
            <summary>
            The shader program name
            </summary>
        </member>
        <member name="P:QuickFont.ShaderVariables.MVPUniformLocation">
            <summary>
            The Model-View-Projection matrix uniform location
            </summary>
        </member>
        <member name="P:QuickFont.ShaderVariables.TextureCoordAttribLocation">
            <summary>
            The texture coordinate attribute location
            </summary>
        </member>
        <member name="P:QuickFont.ShaderVariables.PositionCoordAttribLocation">
            <summary>
            The position coordinate attribute location
            </summary>
        </member>
        <member name="P:QuickFont.ShaderVariables.SamplerLocation">
            <summary>
            The texture sample location
            </summary>
        </member>
        <member name="P:QuickFont.ShaderVariables.ColorCoordAttribLocation">
            <summary>
            The color coordinate attribute location
            </summary>
        </member>
        <member name="T:QuickFont.QFontSharedState">
            <summary>
            The shared state of the <see cref="T:QuickFont.QFontDrawing"/> object.
            This can be shared between different <see cref="T:QuickFont.QFontDrawing"/> objects
            </summary>
        </member>
        <member name="M:QuickFont.QFontSharedState.#ctor(OpenTK.Graphics.ES20.TextureUnit,QuickFont.ShaderVariables)">
            <summary>
            Creates a new instance of <see cref="T:QuickFont.QFontSharedState"/>
            </summary>
            <param name="defaultTextureUnit">The default texture unit</param>
            <param name="shaderVariables">The shader variables</param>
        </member>
        <member name="P:QuickFont.QFontSharedState.DefaultTextureUnit">
            <summary>
            The default texture unit of this shared state
            </summary>
        </member>
        <member name="P:QuickFont.QFontSharedState.ShaderVariables">
            <summary>
            The shader variables of this shared state
            </summary>
        </member>
        <member name="T:QuickFont.QFontDrawingPrimitive">
            <summary>
            Handles the vertex data for rendering text
            </summary>
        </member>
        <member name="M:QuickFont.QFontDrawingPrimitive.#ctor(QuickFont.QFont,QuickFont.QFontRenderOptions)">
            <summary>
            Creates a new instance of <see cref="T:QuickFont.QFontDrawingPrimitive"/> with
            the given <see cref="T:QuickFont.QFont"/> and <see cref="T:QuickFont.QFontRenderOptions"/>
            </summary>
            <param name="font">The <see cref="T:QuickFont.QFont"/></param>
            <param name="options">The <see cref="T:QuickFont.QFontRenderOptions"/></param>
        </member>
        <member name="M:QuickFont.QFontDrawingPrimitive.#ctor(QuickFont.QFont)">
            <summary>
            Creates a new instance of <see cref="T:QuickFont.QFontDrawingPrimitive"/> with
            the given <see cref="T:QuickFont.QFont"/> and the default <see cref="T:QuickFont.QFontRenderOptions"/>
            </summary>
            <param name="font"></param>
        </member>
        <member name="P:QuickFont.QFontDrawingPrimitive.PrintOffset">
            <summary>
            An offset that is added to all positions
            </summary>
        </member>
        <member name="P:QuickFont.QFontDrawingPrimitive.LineSpacing">
            <summary>
            The linespacing used by the <see cref="T:QuickFont.QFont"/>
            </summary>
        </member>
        <member name="P:QuickFont.QFontDrawingPrimitive.IsMonospacingActive">
            <summary>
            Whether monospacing is active in the <see cref="T:QuickFont.QFont"/>
            </summary>
        </member>
        <member name="P:QuickFont.QFontDrawingPrimitive.MonoSpaceWidth">
            <summary>
            The monospacing width
            </summary>
        </member>
        <member name="P:QuickFont.QFontDrawingPrimitive.Font">
            <summary>
            The <see cref="T:QuickFont.QFont"/> used by this instance
            </summary>
        </member>
        <member name="P:QuickFont.QFontDrawingPrimitive.Options">
            <summary>
            The <see cref="T:QuickFont.QFontRenderOptions"/> of this instance
            </summary>
        </member>
        <member name="P:QuickFont.QFontDrawingPrimitive.LastSize">
            <summary>
            The size of the last text printed with this instance
            </summary>
        </member>
        <member name="P:QuickFont.QFontDrawingPrimitive.CurrentVertexRepr">
            <summary>
            The current vertex list
            </summary>
        </member>
        <member name="P:QuickFont.QFontDrawingPrimitive.ShadowVertexRepr">
            <summary>
            The current shadow vertex list
            </summary>
        </member>
        <member name="M:QuickFont.QFontDrawingPrimitive.RenderDropShadow(System.Single,System.Single,System.Char,QuickFont.QFontGlyph,QuickFont.QFont,System.Drawing.Rectangle@)">
            <summary>
            Render a character's drop shadow
            </summary>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
            <param name="c">The character to render</param>
            <param name="nonShadowGlyph">The non drop-shadowed glyph of the character</param>
            <param name="shadowFont">The drop shadow font</param>
            <param name="clippingRectangle">The clipping rectangle</param>
        </member>
        <member name="M:QuickFont.QFontDrawingPrimitive.ScissorsTest(System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Drawing.Rectangle)">
            <summary>
            Scissor test a rectangle
            </summary>
            <param name="x">The x coordinate of the rectangle</param>
            <param name="y">The y coordinate of the rectangle</param>
            <param name="width">Th width of the rectangle</param>
            <param name="height">The height of the rectangle</param>
            <param name="u1">The u1 texture coordinate</param>
            <param name="v1">The v1 texture coordinate</param>
            <param name="u2">The u2 texture coordinate</param>
            <param name="v2">The v2 texture coordinate</param>
            <param name="clipRectangle">The clipping rectangle</param>
            <returns>Whether the rectangle is completely clipped</returns>
        </member>
        <member name="M:QuickFont.QFontDrawingPrimitive.RenderGlyph(System.Single,System.Single,System.Char,QuickFont.QFont,System.Collections.Generic.IList{QuickFont.QVertex},System.Drawing.Rectangle)">
            <summary>
            Renders the glyph at the position given.
            </summary>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
            <param name="c">The character to print.</param>
            <param name="font">The font to print with</param>
            <param name="store">The collection of <see cref="T:QuickFont.QVertex"/>'s to add the vertices too</param>
            <param name="clippingRectangle">The clipping rectangle</param>
        </member>
        <member name="M:QuickFont.QFontDrawingPrimitive.MeasureNextlineLength(System.String)">
            <summary>
            Measures the length from the start of the text up to the next line
            or the end of the string, whichever comes first
            </summary>
            <param name="text">The text to measure</param>
            <returns>The length of the next line</returns>
        </member>
        <member name="M:QuickFont.QFontDrawingPrimitive.TransformPositionToViewport(OpenTK.Vector2)">
            <summary>
            Transforms a given input position to the current viewport
            </summary>
            <param name="input">The untransformed position</param>
            <returns>The transformed position</returns>
        </member>
        <member name="M:QuickFont.QFontDrawingPrimitive.TransformWidthToViewport(System.Single,QuickFont.QFontRenderOptions)">
            <summary>
            Transforms a given width to the current viewport
            </summary>
            <param name="input">The untransformed width</param>
            <param name="options">The render options</param>
            <returns>The transformed width</returns>
        </member>
        <member name="M:QuickFont.QFontDrawingPrimitive.TransformMeasureFromViewport(System.Drawing.SizeF)">
            <summary>
            Transforms a given size to the current viewport
            </summary>
            <param name="input">The untransformed size</param>
            <returns>The transformed size</returns>
        </member>
        <member name="M:QuickFont.QFontDrawingPrimitive.LockToPixel(OpenTK.Vector2)">
            <summary>
            Locks the position so that it lies exactly on a pixel
            </summary>
            <param name="input">The input position</param>
            <returns>The position locked to the nearest pixel</returns>
        </member>
        <member name="M:QuickFont.QFontDrawingPrimitive.TransformToViewport(OpenTK.Vector3)">
            <summary>
            Transforms a vector to the current viewport
            </summary>
            <param name="input">The untransformed vector</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:QuickFont.QFontDrawingPrimitive.Print(System.String,OpenTK.Vector3,QuickFont.QFontAlignment,System.Drawing.Rectangle)">
            <summary>
            Prints the specified text with the given alignment and clipping rectangle
            </summary>
            <param name="text">The text to print</param>
            <param name="position">The position of the text</param>
            <param name="alignment">The text alignment</param>
            <param name="clippingRectangle">The clipping rectangle to scissor test the text with</param>
            <returns>The size of the printed text</returns>
        </member>
        <member name="M:QuickFont.QFontDrawingPrimitive.Print(System.String,OpenTK.Vector3,QuickFont.QFontAlignment,System.Drawing.Color,System.Drawing.Rectangle)">
            <summary>
            Prints the specified text with the given alignment, color and clipping rectangle
            </summary>
            <param name="text">The text to print</param>
            <param name="position">The text position</param>
            <param name="alignment">The text alignment</param>
            <param name="color">The text color</param>
            <param name="clippingRectangle">The clipping rectangle to scissor test the text with</param>
            <returns>The size of the printed text</returns>
        </member>
        <member name="M:QuickFont.QFontDrawingPrimitive.Print(System.String,OpenTK.Vector3,System.Drawing.SizeF,QuickFont.QFontAlignment,System.Drawing.Rectangle)">
            <summary>
            Prints the specified text with the given alignment, maximum size and clipping rectangle
            </summary>
            <param name="text">The text to print</param>
            <param name="position">The text position</param>
            <param name="maxSize">The maxmimum size of the printed text</param>
            <param name="alignment">The text alignment</param>
            <param name="clippingRectangle">The clipping rectangle to scissor test the text with</param>
            <returns>The size of the printed text</returns>
        </member>
        <member name="M:QuickFont.QFontDrawingPrimitive.Print(System.String,OpenTK.Vector3,System.Drawing.SizeF,QuickFont.QFontAlignment,System.Drawing.Color,System.Drawing.Rectangle)">
            <summary>
            Prints the specified text with the given alignment, maximum size, colour and clipping rectangle
            </summary>
            <param name="text">The text to print</param>
            <param name="position">The text position</param>
            <param name="maxSize">The maxmimum size of the printed text</param>
            <param name="alignment">The text alignment</param>
            <param name="colour">The text colour</param>
            <param name="clippingRectangle">The clipping rectangle to scissor test the text with</param>
            <returns>The size of the printed text</returns>
        </member>
        <member name="M:QuickFont.QFontDrawingPrimitive.Print(QuickFont.ProcessedText,OpenTK.Vector3,System.Drawing.Rectangle)">
            <summary>
            Prints the specified processed text with the given clipping rectangle
            </summary>
            <param name="processedText">The processed text to print</param>
            <param name="position">The text position</param>
            <param name="clippingRectangle">The clipping rectangle to scissor test the text with</param>
            <returns>The size of the printed text</returns>
        </member>
        <member name="M:QuickFont.QFontDrawingPrimitive.Print(QuickFont.ProcessedText,OpenTK.Vector3,System.Drawing.Color,System.Drawing.Rectangle)">
            <summary>
            Prints the specified processed text with the given color and clipping rectangle
            </summary>
            <param name="processedText">The processed text to print</param>
            <param name="position">The text position</param>
            <param name="colour">The text colour</param>
            <param name="clippingRectangle">The clipping rectangle to scissor test the text with</param>
            <returns>The size of the printed text</returns>
        </member>
        <member name="M:QuickFont.QFontDrawingPrimitive.Measure(System.String,QuickFont.QFontAlignment)">
            <summary>
            Measures the specified text with the given alignment
            </summary>
            <param name="text">The specified text</param>
            <param name="alignment">The text alignment</param>
            <returns>The size of the text</returns>
        </member>
        <member name="M:QuickFont.QFontDrawingPrimitive.Measure(System.String,System.Single,QuickFont.QFontAlignment)">
            <summary>
            Measures the specified text with the given alignment and a maximum width
            (no maximum height)
            </summary>
            <param name="text">The specified text</param>
            <param name="maxWidth">The maximum width of the text</param>
            <param name="alignment">The text alignment</param>
            <returns>The size of the text</returns>
        </member>
        <member name="M:QuickFont.QFontDrawingPrimitive.Measure(System.String,System.Drawing.SizeF,QuickFont.QFontAlignment)">
            <summary>
                Measures the actual width and height of the block of text.
            </summary>
            <param name="text">The text to measure</param>
            <param name="maxSize">The maximum size of the text</param>
            <param name="alignment">The text alignment</param>
            <returns>The size of the text</returns>
        </member>
        <member name="M:QuickFont.QFontDrawingPrimitive.Measure(QuickFont.ProcessedText)">
            <summary>
                Measures the actual width and height of the block of text
            </summary>
            <param name="processedText">The processed text to measure</param>
            <returns>The size of the text</returns>
        </member>
        <member name="M:QuickFont.QFontDrawingPrimitive.PrintOrMeasure(System.String,QuickFont.QFontAlignment,System.Boolean,System.Drawing.Rectangle)">
            <summary>
            Print or measure the specified text
            </summary>
            <param name="text">The text to print or measure</param>
            <param name="alignment">The text alignment</param>
            <param name="measureOnly">Whether to only measure the text</param>
            <param name="clippingRectangle">The clipping rectangle to scissor test the text with</param>
            <returns>The size of the text</returns>
        </member>
        <member name="M:QuickFont.QFontDrawingPrimitive.PrintOrMeasure(QuickFont.ProcessedText,System.Boolean,System.Drawing.Rectangle)">
            <summary>
            Print or measure the specified processed text
            </summary>
            <param name="processedText">The processed text</param>
            <param name="measureOnly">Whether to only measure the text</param>
            <param name="clippingRectangle">The clipping rectangle to scissor test the text with</param>
            <returns>The size of the text</returns>
        </member>
        <member name="M:QuickFont.QFontDrawingPrimitive.RenderWord(System.Single,System.Single,QuickFont.TextNode,System.Drawing.Rectangle@)">
            <summary>
            Renders a word (text node)
            </summary>
            <param name="x">The x coordinate of the word</param>
            <param name="y">The y coordinate of the word</param>
            <param name="node">The word to render</param>
            <param name="clippingRectangle">The clipping rectangle to scissor test the word with</param>
        </member>
        <member name="M:QuickFont.QFontDrawingPrimitive.TextNodeLineLength(QuickFont.TextNode,System.Single)">
            <summary>
                Computes the length of the next line, and whether the line is valid for
                justification.
            </summary>
            <param name="node">The starting text node</param>
            <param name="maxLength">The maximum length of the line</param>
            <returns>The length of the line</returns>
        </member>
        <member name="M:QuickFont.QFontDrawingPrimitive.CrumbledWord(QuickFont.TextNode)">
            <summary>
            Checks whether a textnode has been crumbled
            </summary>
            <param name="node">The starting node</param>
            <returns>Whether the textnode has been crumbled</returns>
        </member>
        <member name="M:QuickFont.QFontDrawingPrimitive.JustifyLine(QuickFont.TextNode,System.Single)">
            <summary>
                Computes the length of the next line, and whether the line is valid for
                justification.
            </summary>
            <param name="node">The starting text node</param>
            <param name="targetLength">The target line length</param>
        </member>
        <member name="M:QuickFont.QFontDrawingPrimitive.SkipTrailingSpace(QuickFont.TextNode,System.Single,System.Single)">
            <summary>
                Checks whether to skip trailing space on line because the next word does not
                fit.
                We only check one space - the assumption is that if there is more than one,
                it is a deliberate attempt to insert spaces.
            </summary>
            <param name="node">The starting text node</param>
            <param name="lengthSoFar">The length of the line so far</param>
            <param name="boundWidth">The maximum width</param>
            <returns>Whether we can skip the trailing space</returns>
        </member>
        <member name="M:QuickFont.QFontDrawingPrimitive.ProcessText(QuickFont.QFont,QuickFont.QFontRenderOptions,System.String,System.Drawing.SizeF,QuickFont.QFontAlignment)">
            <summary>
                Creates node list object associated with the text.
            </summary>
            <param name="options">The font render options</param>
            <param name="text">The text to process</param>
            <param name="font">The <see cref="T:QuickFont.QFont"/> to process the text with</param>
            <param name="maxSize">The maximum size of the processed text</param>
            <param name="alignment">The text alignment</param>
            <returns>The processed text</returns>
        </member>
        <member name="T:QuickFont.QFontGlyph">
            <summary>
            A <see cref="T:QuickFont.QFontGlyph"/> that holds the glyph data
            </summary>
        </member>
        <member name="F:QuickFont.QFontGlyph.Page">
            <summary>
            Which texture page the glyph is on
            </summary>
        </member>
        <member name="F:QuickFont.QFontGlyph.Rect">
            <summary>
            The rectangle defining the glyphs position on the page
            </summary>
        </member>
        <member name="F:QuickFont.QFontGlyph.YOffset">
            <summary>
            How far the glyph would need to be vertically offset to be vertically in line with the tallest glyph in the set of all glyphs
            </summary>
        </member>
        <member name="F:QuickFont.QFontGlyph.Character">
            <summary>
            Which character this glyph represents
            </summary>
        </member>
        <member name="M:QuickFont.QFontGlyph.#ctor(System.Int32,System.Drawing.Rectangle,System.Int32,System.Char)">
            <summary>
            Create a new <see cref="T:QuickFont.QFontGlyph"/> object
            </summary>
            <param name="page">The texture page this glyph is on</param>
            <param name="rect">The glyph rectangle</param>
            <param name="yOffset">The glyph y offset</param>
            <param name="character">The glyph character</param>
        </member>
        <member name="T:QuickFont.QFontAlignment">
            <summary>
            Text Alignment
            </summary>
        </member>
        <member name="F:QuickFont.QFontAlignment.Left">
            <summary>
            Left-aligned text
            </summary>
        </member>
        <member name="F:QuickFont.QFontAlignment.Right">
            <summary>
            Right-aligned text
            </summary>
        </member>
        <member name="F:QuickFont.QFontAlignment.Centre">
            <summary>
            Centred text
            </summary>
        </member>
        <member name="F:QuickFont.QFontAlignment.Justify">
            <summary>
            Justified text
            </summary>
        </member>
        <member name="T:QuickFont.QFontMonospacing">
            <summary>
            Monospace handling
            </summary>
        </member>
        <member name="F:QuickFont.QFontMonospacing.Natural">
            <summary>
            Monospace only if the font is monospaced
            </summary>
        </member>
        <member name="F:QuickFont.QFontMonospacing.Yes">
            <summary>
            Force monospacing
            </summary>
        </member>
        <member name="F:QuickFont.QFontMonospacing.No">
            <summary>
            Don't monospace
            </summary>
        </member>
        <member name="T:QuickFont.QFontRenderOptions">
            <summary>
            Contains options used for font rendering
            </summary>
        </member>
        <member name="F:QuickFont.QFontRenderOptions.Colour">
            <summary>
            The font colour
            </summary>
        </member>
        <member name="F:QuickFont.QFontRenderOptions.CharacterSpacing">
            <summary>
            Spacing between characters in units of average glyph width
            </summary>
        </member>
        <member name="F:QuickFont.QFontRenderOptions.WordSpacing">
            <summary>
            Spacing between words in units of average glyph width
            </summary>
        </member>
        <member name="F:QuickFont.QFontRenderOptions.LineSpacing">
            <summary>
            Line spacing in units of max glyph width
            </summary>
        </member>
        <member name="F:QuickFont.QFontRenderOptions.DropShadowActive">
            <summary>
            Whether to draw a drop-shadow. Note: this requires
            the QFont to have been loaded with a drop shadow to
            take effect.
            </summary>
        </member>
        <member name="F:QuickFont.QFontRenderOptions.DropShadowOffset">
            <summary>
            Offset of the shadow from the font glyphs in units of average glyph width
            </summary>
        </member>
        <member name="F:QuickFont.QFontRenderOptions.DropShadowColour">
            <summary>
            Opacity of drop shadows
            </summary>
        </member>
        <member name="P:QuickFont.QFontRenderOptions.DropShadowOpacity">
            <summary>
            Set the opacity of the drop shadow
            </summary>
        </member>
        <member name="F:QuickFont.QFontRenderOptions.Monospacing">
            <summary>
            Whether to render the font in monospaced mode. If set to "Natural", then 
            monospacing will be used if the font loaded font was detected to be monospaced.
            </summary>
        </member>
        <member name="F:QuickFont.QFontRenderOptions.TransformToViewport">
             <summary>
             This is intended as a means of rendering text pixel-perfectly at a 
             fixed display size (size on screen) independent of the screen resolution.
             
             Ordinarily it is possible to render pixel-perfect text by calling 
             QFont.Begin() / QFont.End(); however, this means working in a coordinate 
             system corresponding to the current screen resolution. If the screen 
             resolution changes, then the display size of the font will change 
             accordingly which may not be desirable. Many games/applications prefer 
             to use a fixed orthog coordinate system that is independent of screen 
             resolution (e.g. 1000x1000) so that when the screen resolution changes,
             everything is still the same size on screen, it simply has higher
             definition - which is what this setting supports.
             
             One option is simply not to call QFont.Begin() / QFont.End(). This
             works; however, it becomes impossible to assure that glyphs are
             rendered pixel-perfectly. Instead they will be scaled in hardware.
             In most cases this looks fine; however, if you are a perfectionist, 
             you may prefer to use this option to assure pixel perfection.
             
             Setting this option does two things:
             
             Rendering to a specified position is transformed
             Measurements are transformed
             
             So for example, suppose the screen resolution is 1024x768, but you 
             wish to run orthog mode at 1000x1000.  If you set:
             
             myFont.Options.TransformToViewport = new Viewport(0,0,1000,1000);
            
             Then, if you render at position 500,500:
             
             QFont.Begin();
             myFont.Options.LockToPixel = true;
             myFont.Print("Hello",new Vector2(500,500));
             QFont.End();
            
             This will be printed pixel-pefectly at pixel position 512, 384.
             
             Additionally the font will be measured in terms of your 500x500 
             coordinate system.
             
             The only issue is that if you change the resolution, the size of your
             font will change. You can get around this by loading a font size
             that is proportional to the screen resolution. This makes sense:
             if you want a font to be rendered pixel-perfectly at a higher
             resolution, it will need to be a larger font. At present this 
             needs to be doen manually. E.g:
             
                float fontScale = (float)Height / 800;
                compyFontSmall = new QFont("Data/comfy.ttf", 14 * fontScale);
             
             
             </summary>
        </member>
        <member name="F:QuickFont.QFontRenderOptions.LockToPixel">
            <summary>
            Locks the position to a particular pixel, allowing the text to be rendered pixel-perfectly.
            You need to turn this off if you wish to move text around the screen smoothly by fractions 
            of a pixel.
            </summary>
        </member>
        <member name="F:QuickFont.QFontRenderOptions.LockToPixelRatio">
            <summary>
            Only applies when LockToPixel is true:
            This is used to transition smoothly between being locked to pixels and not
            </summary>
        </member>
        <member name="F:QuickFont.QFontRenderOptions.UseDefaultBlendFunction">
            <summary>
            Whether to always set :
            GL.BlendFunc(BlendingFactorSrc.SrcAlpha, BlendingFactorDest.DstAlpha);
            before rendering text.
            
            </summary>
        </member>
        <member name="F:QuickFont.QFontRenderOptions.WordWrap">
            <summary>
            Wrap word to next line if max width hit
            </summary>
        </member>
        <member name="P:QuickFont.QFontRenderOptions.JustifyCharacterWeightForExpand">
            <summary>
            When a line of text is justified, space may be inserted between
            characters, and between words. 
            
            This parameter determines how this choice is weighted:
            
            0.0f => word spacing only
            1.0f => "fairly" distributed between both
            > 1.0 => in favour of character spacing
            
            This applies to expansions only.
            
            </summary>
        </member>
        <member name="P:QuickFont.QFontRenderOptions.JustifyCharacterWeightForContract">
            <summary>
            When a line of text is justified, space may be removed between
            characters, and between words. 
            
            This parameter determines how this choice is weighted:
            
            0.0f => word spacing only
            1.0f => "fairly" distributed between both
            > 1.0 => in favour of character spacing
            
            This applies to contractions only.
            
            </summary>
        </member>
        <member name="F:QuickFont.QFontRenderOptions.JustifyCapExpand">
            <summary>
            Total justification cap as a fraction of the boundary width.
            </summary>
        </member>
        <member name="F:QuickFont.QFontRenderOptions.JustifyCapContract">
            <summary>
            Total justification cap as a fraction of the boundary width.
            </summary>
        </member>
        <member name="F:QuickFont.QFontRenderOptions.JustifyContractionPenalty">
            <summary>
            By what factor justification is penalized for being negative.
            
            (e.g. if this is set to 3, then a contraction will only happen
            over an expansion if it is 3 of fewer times smaller than the
            expansion).
            
            
            </summary>
        </member>
        <member name="F:QuickFont.QFontRenderOptions.ClippingRectangle">
            <summary>
            The clipping rectangle to use for rendering
            </summary>
        </member>
        <member name="M:QuickFont.QFontRenderOptions.CreateClone">
            <summary>
            Creates a clone of the render options
            </summary>
            <returns>The clone of the render options</returns>
        </member>
        <member name="T:QuickFont.QVertexArrayObject">
            <summary>
            A wrapper around OpenGL's vertex array objects
            </summary>
        </member>
        <member name="F:QuickFont.QVertexArrayObject.VertexCount">
            <summary>
            The number of vertices stored in the vertex array buffer
            </summary>
        </member>
        <member name="F:QuickFont.QVertexArrayObject._VBOID">
            <summary>
            The vertex buffer object ID
            </summary>
        </member>
        <member name="F:QuickFont.QVertexArrayObject.QFontSharedState">
            <summary>
            The shared state of this <see cref="T:QuickFont.QVertexArrayObject"/>
            </summary>
        </member>
        <member name="M:QuickFont.QVertexArrayObject.#cctor">
            <summary>
            Default static constructor. Initializes the <see cref="F:QuickFont.QVertexArrayObject.QVertexStride"/> field
            </summary>
        </member>
        <member name="M:QuickFont.QVertexArrayObject.#ctor(QuickFont.QFontSharedState)">
            <summary>
            Creates a new instance of <see cref="T:QuickFont.QVertexArrayObject"/>
            </summary>
            <param name="state">The <see cref="F:QuickFont.QVertexArrayObject.QFontSharedState"/> to use</param>
        </member>
        <member name="M:QuickFont.QVertexArrayObject.AddVertexes(System.Collections.Generic.IList{QuickFont.QVertex})">
            <summary>
            Add verticies to the vertex collection
            </summary>
            <param name="vertices">The verticies to add</param>
        </member>
        <member name="M:QuickFont.QVertexArrayObject.AddVertex(OpenTK.Vector3,OpenTK.Vector2,OpenTK.Vector4)">
            <summary>
            Adds a single vertex to the vertex collection
            </summary>
            <param name="position">The vertex position</param>
            <param name="textureCoord">The vertex texture coordinate</param>
            <param name="colour">The vertex colour</param>
        </member>
        <member name="M:QuickFont.QVertexArrayObject.Load">
            <summary>
            Loads the current vertex collection into the VBO
            </summary>
        </member>
        <member name="M:QuickFont.QVertexArrayObject.Reset">
            <summary>
            Clears the vertex collection
            </summary>
        </member>
        <member name="M:QuickFont.QVertexArrayObject.Bind">
            <summary>
            Binds the vertex array object and vertex buffer object
            </summary>
        </member>
        <member name="M:QuickFont.QVertexArrayObject.DisableAttributes">
            <summary>
            Disable the vertex attribute arrays
            </summary>
        </member>
        <member name="M:QuickFont.QVertexArrayObject.EnableAttributes">
            <summary>
            Enable the vertex attribute arrays
            </summary>
        </member>
        <member name="M:QuickFont.QVertexArrayObject.Dispose(System.Boolean)">
            <summary>
            Disposes resources used by <see cref="T:QuickFont.QVertexArrayObject"/>
            </summary>
            <param name="disposing">Whether to dispose managed resources as well as unmanaged</param>
        </member>
        <member name="M:QuickFont.QVertexArrayObject.Dispose">
            <summary>
            Disposes resources used by <see cref="T:QuickFont.QVertexArrayObject"/>
            </summary>
        </member>
        <member name="T:QuickFont.QVertex">
            <summary>
            Vertex data structure
            </summary>
        </member>
        <member name="T:QuickFont.TextNodeType">
            <summary>
            The Text Node Type
            </summary>
        </member>
        <member name="F:QuickFont.TextNodeType.Word">
            <summary>
            Word
            </summary>
        </member>
        <member name="F:QuickFont.TextNodeType.LineBreak">
            <summary>
            Line Break
            </summary>
        </member>
        <member name="F:QuickFont.TextNodeType.Space">
            <summary>
            Space
            </summary>
        </member>
        <member name="T:QuickFont.TextNode">
            <summary>
            A Text Node
            </summary>
        </member>
        <member name="F:QuickFont.TextNode.Type">
            <summary>
            Text node type
            </summary>
        </member>
        <member name="F:QuickFont.TextNode.Text">
            <summary>
            Text node text
            </summary>
        </member>
        <member name="F:QuickFont.TextNode.Length">
            <summary>
            The length of this text node (in pixels, without tweaks)
            </summary>
        </member>
        <member name="F:QuickFont.TextNode.LengthTweak">
            <summary>
            The length tweaks of this text node (in pixels, teaks for justification)
            </summary>
        </member>
        <member name="F:QuickFont.TextNode.Height">
            <summary>
            The height of this text node
            </summary>
        </member>
        <member name="P:QuickFont.TextNode.ModifiedLength">
            <summary>
            The modified length of this text node
            </summary>
        </member>
        <member name="M:QuickFont.TextNode.#ctor(QuickFont.TextNodeType,System.String)">
            <summary>
            Creates a new instance of <see cref="T:QuickFont.TextNode"/>
            </summary>
            <param name="type">The text node type</param>
            <param name="text">The text node text</param>
        </member>
        <member name="F:QuickFont.TextNode.Next">
            <summary>
            The next text node
            </summary>
        </member>
        <member name="F:QuickFont.TextNode.Previous">
            <summary>
            The previous text node
            </summary>
        </member>
        <member name="T:QuickFont.ProcessedText">
            <summary>
            Class to hide TextNodeList and related classes from 
            user whilst allowing a textNodeList to be passed around.
            </summary>
        </member>
        <member name="T:QuickFont.TextNodeList">
            <summary>
            A doubly linked list of text nodes
            </summary>
        </member>
        <member name="F:QuickFont.TextNodeList.Head">
            <summary>
            The head of the text node linked list
            </summary>
        </member>
        <member name="F:QuickFont.TextNodeList.Tail">
            <summary>
            The tail of the text node linked list
            </summary>
        </member>
        <member name="M:QuickFont.TextNodeList.#ctor(System.String)">
            <summary>
            Builds a doubly linked list of text nodes from the given input string
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:QuickFont.TextNodeList.MeasureNodes(QuickFont.QFontData,QuickFont.QFontRenderOptions)">
            <summary>
            Measures each text node using the specified font data and render options
            </summary>
            <param name="fontData">The font data to use for measuring</param>
            <param name="options">The render options</param>
        </member>
        <member name="M:QuickFont.TextNodeList.MeasureTextNodeLength(QuickFont.TextNode,QuickFont.QFontData,QuickFont.QFontRenderOptions)">
            <summary>
            Measures the length of a text node
            </summary>
            <param name="node">The text node to measure</param>
            <param name="fontData">The font data to use for measuring</param>
            <param name="options">The render options</param>
            <returns>The length of the text node</returns>
        </member>
        <member name="M:QuickFont.TextNodeList.Crumble(QuickFont.TextNode,System.Int32)">
            <summary>
            Splits a word into sub-words of size less than or equal to baseCaseSize 
            </summary>
            <param name="node"></param>
            <param name="baseCaseSize"></param>
        </member>
        <member name="M:QuickFont.TextNodeList.SplitNode(QuickFont.TextNode)">
            <summary>
            Splits a word node in two, adding both new nodes to the list in sequence.
            </summary>
            <param name="node"></param>
            <returns>The first new node</returns>
        </member>
        <member name="M:QuickFont.TextNodeList.Add(QuickFont.TextNode)">
            <summary>
            Adds a node to the head of the doubly linked list
            </summary>
            <param name="node">The node to add</param>
        </member>
        <member name="M:QuickFont.TextNodeList.ToString">
            <summary>
            Returns the string representation of this text node object
            </summary>
            <returns>The text representation</returns>
        </member>
        <member name="M:QuickFont.TextNodeList.GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:QuickFont.TextNodeList.TextNodeListEnumerator">
            <summary>
            An enumerator for the text node list
            </summary>
        </member>
        <member name="P:QuickFont.TextNodeList.TextNodeListEnumerator.Current">
            <summary>Gets the current element in the collection.</summary>
            <returns>The current element in the collection.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:QuickFont.TextNodeList.TextNodeListEnumerator.MoveNext">
            <summary>Advances the enumerator to the next element of the collection.</summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:QuickFont.TextNodeList.TextNodeListEnumerator.Reset">
            <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:QuickFont.TexturePage">
            <summary>
            Represents a texture page
            </summary>
        </member>
        <member name="P:QuickFont.TexturePage.TextureID">
            <summary>
            The texture ID of this texture page
            </summary>
        </member>
        <member name="P:QuickFont.TexturePage.Width">
            <summary>
            The width of this texture page
            </summary>
        </member>
        <member name="P:QuickFont.TexturePage.Height">
            <summary>
            The height of this textur page
            </summary>
        </member>
        <member name="M:QuickFont.TexturePage.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:QuickFont.TexturePage"/>
            </summary>
            <param name="filePath">The filepath to load as a bitmap</param>
        </member>
        <member name="M:QuickFont.TexturePage.#ctor(System.Drawing.Imaging.BitmapData)">
            <summary>
            Creates a new instance of <see cref="T:QuickFont.TexturePage"/>
            </summary>
            <param name="dataSource">The bitmap to use as a data source</param>
        </member>
        <member name="M:QuickFont.TexturePage.CreateTexture(System.Drawing.Imaging.BitmapData)">
            <summary>
            Creates an OpenGL texture
            </summary>
            <param name="dataSource">The data source to use for the texture</param>
        </member>
        <member name="M:QuickFont.TexturePage.ConvertBgraToRgba(System.Drawing.Imaging.BitmapData)">
            <summary>
            Converts a BGRA bitmap to RGBA
            </summary>
            <param name="dataSource">The bitmap to convert</param>
            <returns>The converted bitmap bytes</returns>
        </member>
        <member name="M:QuickFont.TexturePage.Dispose">
            <summary>
            Dispose resources owned by this instance
            </summary>
        </member>
        <member name="T:QuickFont.Viewport">
            <summary>
            Structure representing a viewport
            </summary>
        </member>
        <member name="F:QuickFont.Viewport.X">
            <summary>
            The x coordinate of the viewport
            </summary>
        </member>
        <member name="F:QuickFont.Viewport.Y">
            <summary>
            The y coordinate of the viewport
            </summary>
        </member>
        <member name="F:QuickFont.Viewport.Width">
            <summary>
            The width of the viewport
            </summary>
        </member>
        <member name="F:QuickFont.Viewport.Height">
            <summary>
            The height of the viewport
            </summary>
        </member>
        <member name="M:QuickFont.Viewport.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new <see cref="T:QuickFont.Viewport"/>
            </summary>
            <param name="x">The x coordinate of the viewport</param>
            <param name="y">The y coordinate of the viewport</param>
            <param name="width">The width of the viewport</param>
            <param name="height">The height of the viewport</param>
        </member>
        <member name="T:QuickFont.ViewportHelper">
            <summary>
            Helper methods for dealing with the viewport
            </summary>
        </member>
        <member name="P:QuickFont.ViewportHelper.CurrentViewport">
            <summary>
            The current viewport
            </summary>
        </member>
        <member name="M:QuickFont.ViewportHelper.UpdateCurrentViewport">
            <summary>
            Update the current viewport
            </summary>
        </member>
        <member name="M:QuickFont.ViewportHelper.InvalidateViewport">
            <summary>
            Invalidate the stored viewpoint.
            Will be refreshed the next time it is requested
            </summary>
        </member>
        <member name="M:QuickFont.ViewportHelper.IsOrthographicProjection(OpenTK.Matrix4@)">
            <summary>
            Returns true if the projection matrix is orthographic
            </summary>
            <param name="mat">The projection matrix to test</param>
            <returns>True if the projection matrix is orthographic</returns>
        </member>
    </members>
</doc>
